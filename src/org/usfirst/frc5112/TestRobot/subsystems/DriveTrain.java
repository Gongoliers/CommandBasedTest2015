// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5112.TestRobot.subsystems;

import org.usfirst.frc5112.TestRobot.RobotMap;
import org.usfirst.frc5112.TestRobot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveTrain extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
	SpeedController frontRight = RobotMap.driveTrainFrontRight;
	SpeedController rearLeft = RobotMap.driveTrainRearLeft;
	SpeedController rearRight = RobotMap.driveTrainRearRight;
	RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		setDefaultCommand(new OperatorDrive());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void drive(double x, double y, double rot) {
		robotDrive.mecanumDrive_Cartesian(x, y, rot, 0);
	}

	public void drive(Joystick stick) {
		if (stick.getRawButton(3)) {
			robotDrive.mecanumDrive_Cartesian(0.8, 0, 0, 0);
		} else if (stick.getRawButton(4)) {
			robotDrive.mecanumDrive_Cartesian(-0.8, 0, 0, 0);
		} else {
			double throttle = stick.getThrottle();
			if (throttle <= 0) {
				throttle = 0.6;
			}
			double rotation = stick.getZ();
			if (Math.abs(rotation) < 0.35) {
				rotation = 0;
			} else {
				// rotation /= 2.0;
				if (rotation < 0) {
					rotation = -normalize(Math.abs(rotation), 0.35, 1) / 2.0;
				} else {
					rotation = normalize(rotation, 0.35, 1) / 2.0;
				}
			}

			double y = stick.getY();
			if (Math.abs(y) < 0.1) {
				y = 0;
			}
			double x = stick.getX();
			if (Math.abs(x) < 0.1) {
				x = 0;
			}
			robotDrive.mecanumDrive_Cartesian(x, y, rotation, 0);
		}
	}

	private double normalize(double x, double min, double max) {
		return (x - min) / (max - min);
	}

	public void stop() {
		robotDrive.drive(0, 0);
	}

}
